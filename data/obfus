#!/bin/bash
# Outputs the developer(s'|'s) email address(es)?, or encodes the argument into something to replace $CODED with.

setup() {
	DELINKED=`readlink -f "$0"`
	HERE="`dirname "$DELINKED"`"
	cd "$HERE" # be here now
	# cypher vars -- asymmetric
	a="| base64 -w0"
	A="| base64 -d"
	b="| gzip -9 $a" # WARNING: gzip's depends on time without -n, but -n makes the file larger
	B="$A | gunzip"
	# cypher vars -- symmetric
	s="| tr '[a-zA-Z]' '[A-Za-z]'"
	t="| tr '[a-zA-Z]' '[n-za-mN-ZA-M]'"
	u="| rev"
	# encoding "key" -- be careful to keep the $x cypher vars quoted
	enc="$enc"'$s$t$u$a$t$a$s$u$a$b'
	# decoding reverses var order and capitalizes asymmetric ciphers
	dec="\$$(echo -n "$enc" | tr '[a-b]' '[A-B]' | cut -c2- | rev)"
	#printf "enc: %b\ndec: %b\n" "$enc" "$dec" # debug
	dec="$(eval "echo $dec")" # split out the inner evals
	enc="$(eval "echo $enc")" # so it runs twice as fast
}
de() { # Usage: de thing iterations
	coded="$(cat obfus.$1)"
	for ((i=0; i<"$2"; i++))
	do
		_dec="$_dec$dec"
	done
	eval "echo $coded $_dec"
}
ob() { # Usage: ob content iterations
	for ((i=0; i<"$2"; i++))
	do
		_enc="$_enc$enc"
	done
	eval "echo -n $1 $_enc" # -n to stay true to the original input
}
usage() { # Usage: usage
	echo "Usage: obfus de thing iterations"
	echo "   or: obfus ob thing content iterations"
	echo "Obfuscates or deobfuscates stuff."
	exit 1
}
main() { # Usage: main "$@"
	setup
	if [ -z "$3" ]
	then
		usage
	fi
	if [[ "$1" == "ob" ]]
	then
		if [ -z "$4" ]
		then
			usage
		else
			ob "$3" "$4" > "obfus.$2"
		fi
	elif [[ "$1" == "de" ]]
	then
		de "$2" "$3"
	else
		usage
	fi
}
main "$@"
